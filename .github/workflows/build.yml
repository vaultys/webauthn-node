name: Build and Publish

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            libfido2_install: sudo apt-get update && sudo apt-get install -y libfido2-dev
            platform: linux
          - os: macos-latest
            libfido2_install: brew install libfido2
            platform: darwin
          - os: windows-latest
            platform: win32

    steps:
      - uses: actions/checkout@v4

      - name: Install libfido2 (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: ${{ matrix.libfido2_install }}
        shell: bash

      - name: Download and Install libfido2 for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create directories
          New-Item -ItemType Directory -Force -Path "C:\Program Files\libfido2\include"
          New-Item -ItemType Directory -Force -Path "C:\Program Files\libfido2\lib"
          New-Item -ItemType Directory -Force -Path "C:\Program Files\libfido2\bin"

          # Download the libfido2 release zip from Yubico
          $Url = "https://developers.yubico.com/libfido2/Releases/libfido2-1.15.0-win.zip"
          $DownloadPath = "C:\libfido2.zip"
          Invoke-WebRequest -Uri $Url -OutFile $DownloadPath

          # Create a temporary directory for extraction
          $ExtractPath = "C:\libfido2-extract"
          New-Item -ItemType Directory -Force -Path $ExtractPath

          # Extract the zip file
          Expand-Archive -Path $DownloadPath -DestinationPath $ExtractPath -Force

          # Copy the files to our expected location
          if (Test-Path "$ExtractPath\libfido2-1.15.0-win\include") {
              Copy-Item "$ExtractPath\libfido2-1.15.0-win\include\*" -Destination "C:\Program Files\libfido2\include\" -Recurse -Force
          } else {
              Get-ChildItem -Path $ExtractPath -Recurse -Directory | Where-Object { $_.Name -eq "include" } | ForEach-Object {
                  Copy-Item "$($_.FullName)\*" -Destination "C:\Program Files\libfido2\include\" -Recurse -Force
              }
          }

          if (Test-Path "$ExtractPath\libfido2-1.15.0-win\lib") {
              Copy-Item "$ExtractPath\libfido2-1.15.0-win\lib\*" -Destination "C:\Program Files\libfido2\lib\" -Recurse -Force
          } else {
              Get-ChildItem -Path $ExtractPath -Recurse -Directory | Where-Object { $_.Name -eq "lib" } | ForEach-Object {
                  Copy-Item "$($_.FullName)\*" -Destination "C:\Program Files\libfido2\lib\" -Recurse -Force
              }
          }

          if (Test-Path "$ExtractPath\libfido2-1.15.0-win\bin") {
              Copy-Item "$ExtractPath\libfido2-1.15.0-win\Win32\Release\v143\dynamic\*" -Destination "C:\Program Files\libfido2\bin\" -Recurse -Force
          } else {
              Get-ChildItem -Path $ExtractPath -Recurse -Directory | Where-Object { $_.Name -eq "bin" } | ForEach-Object {
                  Copy-Item "$($_.FullName)\*" -Destination "C:\Program Files\libfido2\bin\" -Recurse -Force
              }
          }

          # Set environment variable
          echo "LIBFIDO2_PATH=C:\Program Files\libfido2" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Check what files were copied
          Write-Host "Files in include directory:"
          Get-ChildItem "C:\Program Files\libfido2\include"

          Write-Host "Files in lib directory:"
          Get-ChildItem "C:\Program Files\libfido2\lib"

          Write-Host "Files in bin directory:"
          Get-ChildItem "C:\Program Files\libfido2\bin"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Create package
        run: npm run package

      - name: Get package version
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webauthn-node-${{ matrix.platform }}
          path: build/stage/v${{ env.VERSION }}/*-v${{ env.VERSION }}-${{ matrix.platform }}*.tar.gz
          if-no-files-found: warn

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.tar.gz
